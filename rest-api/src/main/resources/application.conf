include "akka-actor.conf"
include "akka-stream.conf"
include "akka-cluster.conf"
include "akka-remote-artery.conf"
include "kamon.conf"

akka {
  actor-system = "FileIOClusterSystem"
  backend-actor-cluster-listener-name = "backend"
  frontend-actor-cluster-listener-name = "frontend"

  actor {
    provider = cluster
    warn-about-java-serializer-usage = false
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "0.0.0.0"
      port = 0 # 2771
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://FileIOClusterSystem@0.0.0.0:2771",
      "akka.tcp://FileIOClusterSystem@0.0.0.0:2772"]

    roles = ["frontend"]

    auto-down-unreachable-after = 10s  # comment this line in prod config
  }
}

akka.http {
  server {
    parsing {
      max-content-length=213753229
      max-uri-length = 213753229
    }
    remote-address-header = on
  }
  parsing {
    max-uri-length = 213753229
    max-content-length=213753229
  }
  client {
    parsing {
      max-content-length=213753229
    }
  }
  host-connection-pool.max-open-requests = 64
}





# Kamon configuration
kamon {
  auto-start=true
  metric {
    filters {
      akka-actor {
        includes = ["*/user/*"]
        excludes = [ "*/system/**", "*/user/IO-**", "**/kamon/**" ]      }
      akka-router {
        includes = ["*/user/*"]
        excludes = [ "*/system/**", "*/user/IO-**", "**/kamon/**" ]      }
      akka-dispatcher {
        includes = ["*/user/*"]
        excludes = [ "*/system/**", "*/user/IO-**", "*kamon*", "*/kamon/*", "**/kamon/**" ]
      }
      trace {
        includes = [ "**" ]
        excludes = [ ]
      }
    }
  }

  statsd {
    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    subscriptions {
      histogram       = [ "**" ]
      min-max-counter = [ "**" ]
      gauge           = [ "**" ]
      counter         = [ "**" ]
      trace           = [ "**" ]
      trace-segment   = [ "**" ]
      akka-actor      = [ "**" ]
      akka-dispatcher = [ "**" ]
      akka-router     = [ "**" ]
      system-metric   = [ "**" ]
      http-server     = [ "**" ]
      akka-http-server= [ "**" ]
    }
  }

  modules {
    kamon-jdbc {
      requires-aspectj = yes
      auto-start = yes
    }
    kamon-scala {
      requires-aspectj = yes
      auto-start = yes
    }
    kamon-statsd {
      requires-aspectj = no
      auto-start = yes
      extension-class = "kamon.statsd.StatsD"
    }
    kamon-system-metrics {
      requires-aspectj = no
      auto-start = yes
      extension-class = "kamon.system.SystemMetrics"
    }
  }

  akka-http {
    # Header name used when propagating the `TraceContext.token` value across applications.
    trace-token-header-name = "X-Trace-Token"

    # When set to true, Kamon will automatically set and propogate the `TraceContext.token` value.
    automatic-trace-token-propagation = true

    # Fully qualified name of the implementation of kamon.akka.http.AkkaHttpNameGenerator that will be used for assigning names
    # to traces and client http segments.
    name-generator = kamon.akka.http.DefaultNameGenerator

    client {
      # Strategy used for automatic trace segment generation when issue requests with akka-http-client. The possible values
      # are: request-level and host-level (Not implemented yet!).
      instrumentation-level = request-level
    }
  }
}